#!/bin/bash

# This script is responsible for:
# - mounting all system relevant directories
#     - /proc:  mount -t proc proc /proc
#     - /sys:   mount -t sysfs sysfs /sys
# - to evaluate: mounting the overlay filesystem (see rootfs-builder-3/files_debootstrap/sbin/overlay-init)
# - setting up the network, based on the kernel args

# The reason this is implemented in a shell script is because it is more leightweight than a (go) executable.

# log() {
#   local message=$1
#   printf "%s  init: %s\n" "$(date '+%d-%m-%Y %H:%M:%S.%3N')" "$message"
# }

VERSION="v1.0.0"

log() {
  message="$1"

  # Get the boot time (seconds since epoch) from /proc/stat
  boot_time_epoch=$(grep -Po '^btime \K\d+' /proc/stat)

  current_seconds=$(date +%s)
  current_nanoseconds=$(date +%N)

  # Remove leading zeros to prevent octal interpretation
  current_nanoseconds=$((10#$current_nanoseconds))

  # Calculate the integer part of time since boot
  int_time_since_boot=$((current_seconds - boot_time_epoch))

  # Calculate the fractional part (in seconds) - convert nanoseconds to seconds
  frac_time_since_boot=$(printf "%.6f" "$((current_nanoseconds))e-9")

  time_since_boot="${int_time_since_boot}${frac_time_since_boot:1}"
  display_time=$(printf "[%12s]" "$time_since_boot")

  echo "$display_time $message"
}

# log function for situations where /proc/stat is not available
log_blank() {
  message=$1
  echo "               $message"
}

# ----- show init system banner

log_blank "apollo init system - $VERSION"

# ----- mounting system relevant directories

if [ ! -d "/proc" ]; then
  # cannot use 'log' here because /proc is not mounted yet
  log_blank "cannot mount proc - /proc does not exist"
  exit 1
fi
/bin/mount -t proc proc /proc
log "mounted proc to /proc"

if [ ! -d "/sys" ]; then
  log "cannot mount sysfs - /sys does not exist"
  exit 1
fi
/bin/mount -t sysfs sysfs /sys
log "mounted sysfs to /sys"

# ----- mounting the code filesystem

if [ ! -d "/workspace" ]; then
  log "cannot mount codefs - /workspace does not exist"
  exit 1
fi

if [ ! -b "/dev/vdb" ]; then
  log "cannot mount codefs - target drive /dev/vdb does not exist"
  exit 1
fi

/bin/mount /dev/vdb /workspace
log "mounted codefs to /workspace"

# ----- setting up the network

# Extract the 'ip' argument from the kernel command line
ip_arg=$(cat /proc/cmdline | tr ' ' '\n' | grep '^ip=' | cut -d'=' -f2)

# Check if the ip argument was found
if [ -z "$ip_arg" ]; then
    log "The 'ip' argument was not found in the kernel command line."
    exit 1
fi

# Function to extract a component from the ip argument
extract_component() {
    echo "$ip_arg" | cut -d':' -f"$1"
}

client_ip=$(extract_component 1)
gateway_ip=$(extract_component 3)
netmask=$(extract_component 4)
device=$(extract_component 6)

# Check if the network interface exists
if ! ip link show $device > /dev/null 2>&1; then
    log "network interface $device not found"
    exit 1
fi

# Configure the IP address and netmask
if ! ip addr add $client_ip/$netmask dev $device; then
    log "failed to configure IP address"
    exit 1
fi

# Bring the interface up
if ! ip link set $device up; then
    log "failed to bring up the interface"
    exit 1
fi

# Configure the default gateway
if ! ip route add default via $gateway_ip dev $device; then
    log "failed to configure default gateway"
    exit 1
fi

log "network has been set up with ip $client_ip"

# ----- invoke the agent and porceed with the boot process

log "done - run agent"
exec /usr/bin/agent $@