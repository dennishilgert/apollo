// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: apollo/proto/fleet/v1/fleet.proto

package fleet

import (
	context "context"
	v1 "github.com/dennishilgert/apollo/pkg/proto/shared/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FleetManager_Prepare_FullMethodName = "/apollo.proto.fleet.v1.FleetManager/Prepare"
	FleetManager_Invoke_FullMethodName  = "/apollo.proto.fleet.v1.FleetManager/Invoke"
)

// FleetManagerClient is the client API for FleetManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetManagerClient interface {
	Prepare(ctx context.Context, in *PrepareRunnerRequest, opts ...grpc.CallOption) (*v1.EmptyResponse, error)
	Invoke(ctx context.Context, in *InvokeFunctionRequest, opts ...grpc.CallOption) (*InvokeFunctionResponse, error)
}

type fleetManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetManagerClient(cc grpc.ClientConnInterface) FleetManagerClient {
	return &fleetManagerClient{cc}
}

func (c *fleetManagerClient) Prepare(ctx context.Context, in *PrepareRunnerRequest, opts ...grpc.CallOption) (*v1.EmptyResponse, error) {
	out := new(v1.EmptyResponse)
	err := c.cc.Invoke(ctx, FleetManager_Prepare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerClient) Invoke(ctx context.Context, in *InvokeFunctionRequest, opts ...grpc.CallOption) (*InvokeFunctionResponse, error) {
	out := new(InvokeFunctionResponse)
	err := c.cc.Invoke(ctx, FleetManager_Invoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetManagerServer is the server API for FleetManager service.
// All implementations should embed UnimplementedFleetManagerServer
// for forward compatibility
type FleetManagerServer interface {
	Prepare(context.Context, *PrepareRunnerRequest) (*v1.EmptyResponse, error)
	Invoke(context.Context, *InvokeFunctionRequest) (*InvokeFunctionResponse, error)
}

// UnimplementedFleetManagerServer should be embedded to have forward compatible implementations.
type UnimplementedFleetManagerServer struct {
}

func (UnimplementedFleetManagerServer) Prepare(context.Context, *PrepareRunnerRequest) (*v1.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedFleetManagerServer) Invoke(context.Context, *InvokeFunctionRequest) (*InvokeFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoke not implemented")
}

// UnsafeFleetManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetManagerServer will
// result in compilation errors.
type UnsafeFleetManagerServer interface {
	mustEmbedUnimplementedFleetManagerServer()
}

func RegisterFleetManagerServer(s grpc.ServiceRegistrar, srv FleetManagerServer) {
	s.RegisterService(&FleetManager_ServiceDesc, srv)
}

func _FleetManager_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetManager_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).Prepare(ctx, req.(*PrepareRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManager_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FleetManager_Invoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerServer).Invoke(ctx, req.(*InvokeFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetManager_ServiceDesc is the grpc.ServiceDesc for FleetManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apollo.proto.fleet.v1.FleetManager",
	HandlerType: (*FleetManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _FleetManager_Prepare_Handler,
		},
		{
			MethodName: "Invoke",
			Handler:    _FleetManager_Invoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apollo/proto/fleet/v1/fleet.proto",
}
